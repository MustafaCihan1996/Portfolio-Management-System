/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package c;

import static c.Investment.InvestmentAll;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;



/**
 *
 * @author mustafaasimcihan
 */
public class Search extends javax.swing.JDialog {

    /**
     * Creates new form Search
     */
    public Search(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jLabel6.setText("jLabel6");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Searching Investments");

        jLabel2.setText("Symbol");

        jLabel3.setText("Name");

        jLabel4.setText("Low Price");

        jLabel5.setText("Highprice");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Reset");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel4)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2))
                            .addGap(11, 11, 11)))
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(102, 102, 102))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(234, 234, 234)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jButton1)
                .addGap(146, 146, 146)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(95, 95, 95))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
                String Symbol = jTextField1.getText();
                
                String Name = jTextField2.getText();
                
                String LowPrice = jTextField3.getText();
                
                String HighPrice = jTextField4.getText();
                
                double low = 0;
                
                double high = 0;
                
                int decider = 0;
                
                try
                
                {
                    if(!LowPrice.isEmpty())
                    
                    {
                        
                      low = Double.parseDouble(LowPrice);  
                        
                    }
                    
                
                }
                catch(NumberFormatException e)
                
                {
                
                    JOptionPane.showMessageDialog(null, "Low Price should be integer");
                    
                     jTextField3.setText("");
                     
                     decider = 1;
                    
                
                }
                
                 try
                
                {
                    if(!HighPrice.isEmpty())
                    
                    {
                
                    high = Double.parseDouble(HighPrice);
                    
                    }
                
                }
                catch(NumberFormatException e)
                
                {
                
                    JOptionPane.showMessageDialog(null, "High Price should be integer");
                    
                     jTextField4.setText("");
                     
                     decider = 1;
                    
                
                }
               
                ArrayList <Investment> stockAllOne = new ArrayList <Investment> ();
    
                ArrayList <Investment> mutualFundAllOne = new ArrayList <Investment> ();
              
                stockAllOne.addAll(InvestmentAll);
                
                mutualFundAllOne.addAll(InvestmentAll);
                
                HashMap<Integer, Integer> saverStock = new HashMap<Integer, Integer>();
                
                 HashMap<Integer, Integer> savermutualFund = new HashMap<Integer, Integer>();
                
                int saverLoop = 0;
                
                int saverLoopTwo = 0;
                
                //ListIterator<Stock> iterator = stockAllOne.listIterator();
                
                //ListIterator<Mutualfund> iteratorTwo = mutualFundAllOne.listIterator();
                
                
                double bigger = 0;
                
                double smaller = 0;
                
                String range;
                
                String nameSearch = "";
                
                String symbolSearch = "";
                
                
                System.out.println("Enter the price range");
                
                //range = scan.nextLine();
                
                if(!LowPrice.isEmpty() && HighPrice.isEmpty())
                
                {
                    
                    
                    bigger = Double.parseDouble(LowPrice);
                    
                    for(int k = 0; k<stockAllOne.size(); k++)
                    
                    {
                        
                        //delete
                        if(stockAllOne.get(k).getPrice() > bigger)
                        
                        {
                            
                            saverStock.put(k, saverLoop);
                            
                            saverLoop++;
                           
                        }
                        
                        
                        
                    }
                    
                    for(int j = 0; j<mutualFundAllOne.size(); j++)
                    
                    {
                        
                        if(mutualFundAllOne.get(j).getPrice() > bigger)
                        
                        {
                            
                            savermutualFund.put(j, saverLoopTwo);
                            
                            saverLoopTwo++;
                            
                        }
                        
                       
                        
                    }
                
                }
                
                if(!HighPrice.isEmpty() && LowPrice.isEmpty())
                
                {
                    
                    //String[] saver = range.split("-");
                    
                    //range = saver[1];
                    
                    bigger = Double.parseDouble(HighPrice);
                    
                    for(int k = 0; k<stockAllOne.size(); k++)
                    
                    {
                        
                        if(stockAllOne.get(k).getPrice() < bigger)
                        
                        {
                            
                            saverStock.put(k, saverLoop);
                            
                            saverLoop++;
                           
                        }
                        
                        
                        
                    }
                    
                    for(int j = 0; j<mutualFundAllOne.size(); j++)
                    
                    {
                        
                        if(mutualFundAllOne.get(j).getPrice() < bigger)
                        
                        {
                            
                            savermutualFund.put(j, saverLoopTwo);
                            
                            saverLoopTwo++;
                            
                        }
                        
                       
                        
                    }
                     
                    
                }
                
               
                
                if(!LowPrice.isEmpty() && !HighPrice.isEmpty())
                
                {
                    
                     
                    //String[] saver = range.split("-");
                    
                    //range = saver[0];
                    
                    bigger = Double.parseDouble(HighPrice);
                    
                    //ange = saver[1];
                    
                    smaller = Double.parseDouble(LowPrice);
                    
                    
                    
                    for(int l = 0; l<stockAllOne.size(); l++)
                    
                    {
                        
                        if(!(stockAllOne.get(l).getPrice() >= smaller && stockAllOne.get(l).getPrice() <= bigger))
                        
                        {
                            
                            saverStock.put(l, saverLoop);
                            
                            saverLoop++;
                            
                        }
                        
                       
                        
                    }
                    
                    
                    for(int p = 0; p< mutualFundAllOne.size(); p++)
                    
                    {
                        
                        if(!(mutualFundAllOne.get(p).getPrice() >= smaller && mutualFundAllOne.get(p).getPrice() <= bigger))
                        
                        {
                            
                            savermutualFund.put(p, saverLoopTwo);
                            
                            saverLoopTwo++;
                            
                        }
                        
                       
                        
                    }   
                    
                }
                    
                System.out.println("Enter the name");
                
                nameSearch = Name;
                
                String[] savermj = Name.split("[ ]+");
                
                
                for(int r = 0; r<stockAllOne.size(); r++)
                
                {
                
                    for(int w = 0; w<savermj.length; w++)
                
                    {
                  
                        if(!stockAllOne.get(r).getName().toLowerCase().equals(savermj[w].toLowerCase()) && !savermj[w].isEmpty())
                        
                        {
                            if(!saverStock.containsKey(r))
                            
                            {
                            
                                 saverStock.put(r, saverLoop);
                            
                                 saverLoop++;
                            
                            }
                           
                            
                        }
                        
                        
                    
                    
                    }
                    
                   
                }
               
                for(int a = 0; a<mutualFundAllOne.size(); a++)
                
                {
                
                    for(int s = 0; s<savermj.length; s++)
                
                    {
                  
                        if(!mutualFundAllOne.get(a).getName().toLowerCase().equals(savermj[s].toLowerCase()) && !savermj[s].isEmpty())
                        
                        {
                          
                            if(!savermutualFund.containsKey(a))
                            
                            {
                            
                                 savermutualFund.put(a, saverLoopTwo);
                            
                                 saverLoopTwo++;
                            
                            }
                            
                        }
                        
                        
                    
                    
                    }
                    
                    
                }
                
                System.out.println("Enter the symbol");
                
                symbolSearch = Symbol;
                
                for(int u = 0; u< stockAllOne.size(); u++)
                
                {
                
                    if(!stockAllOne.get(u).getSymbol().toLowerCase().equals(Symbol.toLowerCase()) && !Symbol.isEmpty())
                    
                    {
                       
                       if(!saverStock.containsKey(u))
                            
                        {
                            
                                 saverStock.put(u, saverLoop);
                            
                                 saverLoop++;
                            
                        }
                        
                    }
                    
                   
                    
                }
                
                 for(int c = 0; c< mutualFundAllOne.size(); c++)
                
                {
                
                    if(!mutualFundAllOne.get(c).getSymbol().toLowerCase().equals(Symbol.toLowerCase()) && !Symbol.isEmpty())
                    
                    {
                       
                        if(!savermutualFund.containsKey(c))
                            
                            {
                            
                                 savermutualFund.put(c, saverLoopTwo);
                            
                                 saverLoopTwo++;
                            
                            }
                        
                    }
                    
                    
                    
                }
                
                 
                System.out.println("Your Search Results");
                
                if(decider == 0)
                
                {
                
                for(int g = 0; g< mutualFundAllOne.size(); g++)
                
                {
                   if(!savermutualFund.containsKey(g))
                   
                   {
                       
                       jTextArea1.append(mutualFundAllOne.get(g).getName() + " " + mutualFundAllOne.get(g).getSymbol() + " " + mutualFundAllOne.get(g).getPrice() + " " + mutualFundAllOne.get(g).getBookValue() + "\n");
                       
                       
                       // System.out.println();
                   
                   }
                    
                }
                
                }
                stockAllOne.clear();
                
                mutualFundAllOne.clear();
                
                
             
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        dispose();
              
        Menu a = new Menu(null, true);
              
        a.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
    
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Search dialog = new Search(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
